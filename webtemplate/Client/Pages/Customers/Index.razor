@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@inject HttpInterceptorService _interceptor
@implements IDisposable


<h3 class="card-title">Customers</h3>

<a href="/customers/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	Create New Customer
</a>
<br />
<br />
@if (Customers == null)
{
	<div class="alert alert-info">Loading customers...</div>
}
else
{
	<table class="table table-responsive" id="customersTable">
		<thead>
			<tr>
				<th>Name</th>
				<th>Email</th>
				<th>Address</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in Customers)
			{
				<tr>
					<td>@customer.Name</td>
					<td>@customer.Address</td>
					<td>@customer.Email</td>
					

					<td>
						<a href="/customers/view/@customer.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>
						<a href="/customers/edit/@customer.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>
						<button class="btn btn-danger" @onclick="@(()=>Delete(customer.Id))">
							<span class="oi oi-delete"></span>
						</button>
					</td>
				</tr>

			}
		</tbody>
	</table>
}

<br />

@code {
	private List<Customer>? Customers;

	protected async override Task OnInitializedAsync()
	{
		_interceptor.MonitorEvent();
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}

	async Task Delete(int customerID)
	{
		if (Customers != null)
		{
			var customer = Customers.First(q => q.Id == customerID);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer.Id}?");
			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{customerID}");
				await OnInitializedAsync();
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender)
	{
		await js.InvokeVoidAsync("AddDataTable", "#customersTable");
	}

	public void Dispose()
	{
		js.InvokeVoidAsync("DataTablesDispose", "#customersTable");
	}
}
